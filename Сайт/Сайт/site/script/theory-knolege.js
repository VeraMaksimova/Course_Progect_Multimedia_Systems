let form = document.querySelector('#dialog__form');
let input = document.querySelector('#dialog__input');
let button = document.querySelector('#dialog__button');
let messanger = document.querySelector('#dialog__messanger');

form.addEventListener('submit', handleForm);

function handleForm() {
	if (input.value != '') {
		messanger.innerHTML += `<div class="dialog__message question">${input.value}</div>`;
		let [answer, photo] = getAnswer(input.value);
		messanger.innerHTML += `<div class="dialog__message answer">${answer}</div>`;
		photo.forEach(element => {
			messanger.innerHTML += element;
		});
		messanger.scrollTop = 99999;

		utterance = new SpeechSynthesisUtterance(answer);
		speechSynthesis.cancel();
		speechSynthesis.speak(utterance);
	}
	input.value = '';
}

input.addEventListener('click', inputClick, false);

function inputClick() {
	speechSynthesis.cancel();
}

button.addEventListener('mouseover', buttonOver, false);
button.addEventListener('mouseout', buttonOut, false);
button.addEventListener('click', buttonClick, false);

function buttonOver() {
	button.classList.add('dialog__button-hover');
}

function buttonOut() {
	button.classList.remove('dialog__button-hover');
}

function buttonClick() {
	button.classList.add('dialog__button-listen');

	speechSynthesis.cancel();

	let recognizer = new webkitSpeechRecognition();
	recognizer.interimResults = true;
	recognizer.lang = 'ru-Ru';
	recognizer.on;
	recognizer.onresult = function (event) {
		let result = event.results[event.resultIndex];
		if (result.isFinal) {
			input.value = result[0].transcript;
			button.classList.remove('dialog__button-listen');
			handleForm();
		} else {
			input.value = result[0].transcript;
		}
	};
	recognizer.onaudioend = function (event) {
		button.classList.remove('dialog__button-listen');
	};
	recognizer.start();
}

let knowledge = [
	[
		'электрогитара',
		'- это',
		'струнный щипковый электрический музыкальный инструмент, разновидность гитары, имеющая электромагнитные звукосниматели, преобразующие колебания металлических струн в колебания электрического тока.',
		
	],
	[
		'электрогитары',
		'состоят из',
		'грифа и корпуса, а также струн. На корпусе расположен: бридж, защитная накладка, регулятор громкости, регулятор тона. На грифе расположены: метки и колки.',
	],
	[
		'гриф',
		'служит',
		'для управления высотой звучания нот. Изготавливается из дерева и состоит из двух частей: собственно сам гриф и накладка, на которой размещаются лады, которые используются для обозначения позиций нот на грифе. Гриф имеет голову, на которой располагаются колки, которые, в свою очередь, служат для наматывания струн и настраивания гитары. Внутрь грифа устанавливается металлический анкер, играющий роль стержня для компенсации прогиба грифа при воздействии натяжения струн. Также между ладами и головой грифа устанавливается порожек — подставка для поднятия струн над плоскостью накладки грифа.',
		'<img class="dialog__image" src="img/srtucture/squier-fsr-classic-vibe-60s-custom-esquire-lrl-black-6.jpg"/>',
	],
	[
		'струны',
		'',
		'являются непосредственным источником звуковых колебаний, возникающих под воздействием щипков гитариста. Могут различаться по толщине (от 0,08 мм и менее до 0,58 мм и более) и материалу (хром, никель, сталь и т. д.). Состоят из керна, или сердечника (жилы), а также оплётки и бойка.',
	],
	[
		'струна',
		'- это',
		'деталь струнных музыкальных инструментов, служащая первоисточником звуковых колебаний. Представляет собой длинный отрезок гибкого материала, натягиваемого над резонаторным корпусом щипковых, смычковых, ударных или внутри клавишных струнных инструментов',
	],
	[
		'корпус',
		'нужен',
		'-- для закрепления струн, а также электрических элементов и фурнитуры. Как и гриф, в большинстве случаев, изготавливается из дерева (из одного куска или нескольких). На корпусе размещаются бридж (струнодержатель), к которому крепятся струны (может быть различных типов: Floyd Rose, Tune-o-Matic, Tremolo Bar); звукосниматель(и), преобразующие колебания струны в электрический сигнал; темброблок с потенциометрами для управления громкостью и тоном звучания, а также переключателем звукоснимателей; и разъём Jack для подключения кабеля. Дополнительно на деке размещаются крепления для плечевого ремня для игры стоя и пикгард, служащий для защиты корпуса от царапин медиатором при игре.',
	],
	[
		'электрогитары',
		'изготавливаются',
		', как правило, из дерева. Самые распространённые материалы — ольха, ясень, махагони (красное дерево), клён. В качестве накладок на гриф применяют палисандр, чёрное дерево и клён.',
	],
	[
		'гриф',
		'- это',
		' — продолговатая, выступающая за пределы резонаторного корпуса часть струнного щипкового или смычкового музыкального инструмента.',
	],
	[
		'классический строй электрогитары',
		'устроен',
		'аналогично как и у шестиструнной классической гитары: ми-ля-ре-соль-си-ми (E-A-D-G-B-E, от низких нот к высоким). Достаточно часто используется строй «dropped D», в котором нижняя струна настраивается в ре (D) и более низкие настройки (Drop C, Drop B), которые используют в основном гитаристы, играющие в различных поджанрах экстремального металла.',
	],
	[
		'строй восьмиструнных гитар',
		'-- это',
		'следующее сочетание звуков (от низкого к высокому): Фа диез (F#); Си (B); Ми (E); Ля (A); Ре (D); Соль (G); Си (B); Ми (E). Такое соотношение звуков приближает восьмиструнную гитару к четырехструнному басу: в то время как у баса нижний звук Ми контроктавы (E1), у восьмиструнной электрогитары нижний звук — Фа диез контроктавы (F#1). Практически бас и электрогитара в одном инструменте.',
	],
	[
		'звукосниматель',
		'- это',
		'устройство,  преобразующее колебания струн в электрический ток. По принципу действия звукосниматели делятся на электромагнитные, пьезоэлектрические и оптические .',
	],
	[
		'сконструировал первый звукосниматель',
		'в 1924 году Ллойд Лоэр (англ. Lloyd Loar), инженер-изобретатель, работавший в компании Gibson.',
		'<img class="dialog__image" src="img/theory/Llpud.png"/>',
	],
	[
		'электромагнитный звукосниматель',
		'работает',
		'следующим образом: снятие звука происходит благодаря изменению электромагнитного поля за счёт колебания в нём струны. Преобразование колебания струн в электрический сигнал происходит следующим образом: металлическая струна колеблется в поле, создаваемом постоянным магнитом (магнитами) датчика. Внутри катушки проволоки, намотанной вокруг этих магнитов, возникает электрический ток, который через провода подается в усилитель. Электромагнитный звукосниматель воспринимает только поперечные колебания струн, перпендикулярные магнитной оси катушки. Зачастую датчики сильно влияют на окраску сигнала, имеют различные АЧХ, уровень компрессии, уровень сигнала. Поэтому заменой датчиков можно изменить звучание инструмента.',
	],
	[
		'звукосниматели',
		'можно подразделить',
		'на пассивные и активные',
	],
	[
		'активный звукосниматель',
		' работает',
		'следующим образом:в активных звукоснимателях предварительное усиление звука осуществляется за счет встроенной в него электроники, которая позволяет подать в линию передачи сигнал большей мощности (при этом критичен уровень собственных шумов). Недостаток — необходимость в дополнительном источнике питания от 9V батареи типа «Кроны». Достоинства: независимость характеристик звукоснимателя от подключаемой аппаратуры и снижение относительного уровня шумов в линии передачи и усилителе',
	],
	[
		'пассивный звукосниматель',
		'работает',
		'следующим образом: представляют собой устройство не осуществляющее усиление сигнала. Актуальным для магнитных звукоснимателей недостатком является некоторая зависимость электрических параметров (в основном добротности и резонансной частоты) от параметров подключенных внешних устройств (усилитель) и линий коммутации (кабель) и наведенных на них шумов. Как преимущество — отсутствие необходимости в дополнительном источнике питания.',
	],
	[
		'ллойд лоэр',
	 	'- это',
		'человек сконструировавший первый звукосниматель'
	],
	
	
];

// псевдоокончания сказуемых (глаголов, кратких причастий и прилагательных )
let endings = [
	['ет', '(ет|ут|ют)'],
	['ут', '(ет|ут|ют)'],
	['ют', '(ет|ут|ют)'], // 1 спряжение
	['ит', '(ит|ат|ят)'],
	['ат', '(ит|ат|ят)'],
	['ят', '(ит|ат|ят)'], // 2 спряжение
	['ется', '(ет|ут|ют)ся'],
	['утся', '(ет|ут|ют)ся'],
	['ются', '(ет|ут|ют)ся'], // 1 спряжение, возвратные
	['ится', '(ит|ат|ят)ся'],
	['атся', '(ит|ат|ят)ся'],
	['ятся', '(ит|ат|ят)ся'], // 2 спряжение, возвратные
	['ен', 'ен'],
	['ена', 'ена'],
	['ено', 'ено'],
	['ены', 'ены'], // краткие прилагательные
	['ан', 'ан'],
	['ана', 'ана'],
	['ано', 'ано'],
	['аны', 'аны'], // краткие прилагательные
	['жен', 'жен'],
	['жна', 'жна'],
	['жно', 'жно'],
	['жны', 'жны'], // краткие прилагательные
	['такое', '- это'],
	['такой', '- это'],
	['какой'],
	['кто']
]; // для вопроса "что такое X?" ответ - "X - это ..."

// черный список слов, распознаваемых как сказуемые по ошибке
let blacklist = ['замена', 'замены', 'атрибут', 'маршрут', 'член', 'нет', 'сконструировал'];

function getEnding(word) {
	// проверка по черному списку
	if (blacklist.indexOf(word) !== -1) return -1;
	// перебор псевдоокончаний
	for (let j = 0; j < endings.length; j++) {
		// проверка, оканчивается ли i-ое слово на j-ое псевдоокончание
		if (word.substring(word.length - endings[j][0].length) == endings[j][0]) {
			return j; // возврат номера псевдоокончания
		}
	}
	return -1;
}

// функция, которая делает первую букву большой
function big1(str) {
	return str[0].toUpperCase() + str.slice(1);
}

// главная функция, обрабатывающая запросы клиентов
function getAnswer(question) {
	txt = question.toLowerCase().replace(/[*_#?\'",.!()[\]\\/]/g, '');
	// массив слов и знаков препинания
	let words = txt.split(' ');
	// флаг, найден ли ответ
	let result = false;
	// формируемый функцией ответ на вопрос
	let answer = [];
	answer[0] = '';
	answer[1] = new Array([]);
	// перебор слов
	for (let i = 0; i < words.length; i++) {
		// поиск номера псевдоокончания
		let ending = getEnding(words[i]);

		// если псевдоокончание найдено – это сказуемое, подлежащее в вопросе после него
		if (ending >= 0) {
			// ТОЧНЫЙ ПОИСК
			let subject_array = words.slice(i + 1);
			let subject_text = subject_array.join(' ');
			for (let j = 0; j < knowledge.length; j++)
				if (
					((words[i] == knowledge[j][1] || // точное совпадение сказуемого
						words[i].substring(0, words[i].length - endings[ending][0].length) +
							endings[ending][1] ==
							knowledge[j][1]) && // совпадение сказуемого с подстановкой (такое ->- это)
						subject_text == knowledge[j][0]) ||
					subject_text == knowledge[j][2]
				) {
					// совпадение подлежащего
					// создание простого предложения из семантической связи
					answer[0] += big1(
						knowledge[j][0] +
							' ' +
							knowledge[j][1] +
							' ' +
							knowledge[j][2] +
							'.<br/>'
					);
					if (knowledge[j][3]) answer[1].push(knowledge[j][3]);
					result = true;
					return answer;
				}
			if (result == false) {
				// ПОИСК С ПОМОЩЬЮ РЕГУЛЯРНЫХ ВЫРАЖЕНИЙ
				// замена псевдоокончания на набор возможных окончаний
				words[i] =
					words[i].substring(0, words[i].length - endings[ending][0].length) +
					endings[ending][1];
				// создание регулярного выражения для поиска по сказуемому из вопроса
				let predicate = new RegExp(words[i]);
				// для кратких прилагательных захватываем следующее слово
				if (endings[ending][0] == endings[ending][1]) {
					predicate = new RegExp(words[i] + ' ' + words[i + 1]);
					i++;
				}
				let subject_array = words.slice(i + 1);
				// создание регулярного выражения для поиска по подлежащему из вопроса
				// из слов подлежащего выбрасываем короткие предлоги (периметр у квадрата = периметр квадрата)
				for (let j = 0; j < subject_array.length; j++) {
					if (subject_array[j].length < 3) {
						subject_array.splice(j);
						j--;
					}
				}
				let subject_string = subject_array.join('.*');
				// только если в послежащем больше трех символов
				if (subject_string.length > 3) {
					let subject = new RegExp('.*' + subject_string + '.*');
					// поиск совпадений с шаблонами среди связей семантической сети
					for (let j = 0; j < knowledge.length; j++) {
						if (
							predicate.test(knowledge[j][1]) &&
							(subject.test(knowledge[j][0]) || subject.test(knowledge[j][2]))
						) {
							// создание простого предложения из семантической связи
							answer[0] += big1(
								knowledge[j][0] +
									' ' +
									knowledge[j][1] +
									' ' +
									knowledge[j][2] +
									'.<br/>'
							);
							if (knowledge[j][3]) answer[1].push(knowledge[j][3]);
							result = true;
							return answer;
						}
					}
					// если совпадений с двумя шаблонами нет
					if (result == false) {
						// поиск совпадений только с шаблоном подлежащего
						for (let j = 0; j < knowledge.length; j++) {
							if (
								subject.test(knowledge[j][0]) ||
								subject.test(knowledge[j][2])
							) {
								// создание простого предложения из семантической связи
								answer[0] += big1(
									knowledge[j][0] +
										' ' +
										knowledge[j][1] +
										' ' +
										knowledge[j][2] +
										'.<br/>'
								);
								if (knowledge[j][3]) answer[1].push(knowledge[j][3]);
								result = true;
								return answer;
							}
						}
					}
				}
			}
		}
	}
	if (!result) answer[0] = 'Ответ не найден';
	return answer;
}
